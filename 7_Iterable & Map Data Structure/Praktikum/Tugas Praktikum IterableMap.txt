//Elisandra Nur PN//
//Jawaban ada di folder screenshots 


1. Buatlah sebuah program menggabungkan 2 array yang diberikan, dan jangan sampai terdapat nama yang sama di data yang sudah tergabung tadi.
    
    **Sample Test Cases**
    
    Input: ['kazuya', 'jin', 'lee'], ['kazuya', 'feng']
    
    Output: ['kazuya', 'jin', 'lee', 'feng']

    Input: ['lee', 'jin'], ['kazuya', 'panda']
    
    Output: ['lee', 'jin', 'kazuya', 'panda']

Jawaban:>

// ELISANDRA NUR PN QE C
import java.util.ArrayList;
import java.util.Arrays;
import java.util.*;

public class work1 {
    // Function to remove duplicates from an ArrayList
    public static <T> ArrayList<T> removeDuplicates(ArrayList<T> list)
    {

        // Create a new LinkedHashSet
        Set<T> set = new LinkedHashSet<>();

        // Add the elements to set
        set.addAll(list);

        // Clear the list
        list.clear();

        // add the elements of set
        // with no duplicates to the list
        list.addAll(set);

        // return the list
        return list;
    }

    
    public static void main(String args[])
    {

        // Get the ArrayList with duplicate values
        ArrayList<String> list1 = new ArrayList<>(Arrays.asList("kazuya", "jin", "lee"));
        ArrayList<String> list2 = new ArrayList<>(Arrays.asList( "kazuya", "feng"));

        // Print the Arraylist
        System.out.println("ArrayList : "+ list1 + list2);
        list1.add( "feng");
        list1.add("kazuya");


        // Remove duplicates
        ArrayList<String> newList1 = removeDuplicates(list1);

        // Print the ArrayList with duplicates removed
       System.out.println("ArrayList with duplicates removed: "+ newList1);
    }
}

    
2. Buat program sesuai dengan deskripsi di bawah. Input merupakan variable string berisi kumpulan angka. Output merupakan list / array berisi angka yang hanya muncul 1 kali pada input.
    
    **Sample Test Case**
    
    Input: “76523752”
    
    Output: [6, 3]
    
    Input: “1122”
    
    Output: []

Jawaban:>
//ELISANDRA NUR PN QEC
//NOMOR 2

import java.util.Arrays;
public class work2 {
    public static void countFreq(int arr[], int n)
    {
        boolean visited[] = new boolean[n];
        Arrays.fill(visited, false);
        // menghitung frekuensi nilai array
        for (int i = 0; i < n; i++) {

            if (visited[i] == true)
                continue;

            int count = 1;
            for (int j = i + 1; j < n; j++) {
                if (arr[i] == arr[j]) {
                    visited[j] = true;
                    count++;
                }
            }
            if(count==1)
                System.out.println(arr[i]);
        }
    }

    public static void main(String []args)
    {
        int arr[] = new int[]{7,6,5,2,3,7,5,2};
        int n = arr.length;
        countFreq(arr, n);
    }
}

    
3. Given an array of sorted numbers and a target sum, find a pair in the array whose sum is equal to the given target. Write a function to return the indices of the two numbers (i.e. the pair) such that they add up to the given target. 
    
    **Challenges**:
    
    Solve with linear complexity O(n), **not** O(n^2) if you can!
    
    **Sample Test Cases**
    
    Input: [1, 2, 3, 4, 6], target=6
    
    Output: [1, 3]
Jawaban:>
import java.util.HashMap;
import java.util.Map;
public class work3 {
    static int getPairsCount(int[] arr, int n, int target)
    {
        HashMap<Integer,Integer> map = new HashMap<>();
        int pairs=0;
        for (int i=0; i<n; i++)
        {
            if (map.containsKey(target + arr[i]))
            {
                pairs += map.get(target + arr[i]);
                for (int j=1; j<=map.get(target +arr[i]); j++)
                    System.out.print("(" + (target+arr[i]) + "," + (arr[i]) + ") ");
            }
            map.put(arr[i] , map.getOrDefault(arr[i],0)+1);
        }
        return pairs;
    }
    public static void main (String [] args)
    {
        int[] input = {1, 2, 3, 4, 6};
        int target = 6;
        System.out.println(getPairsCount(input , input.length , target));
    }
    }
    
    Explanation: The numbers at index 1 and 3 add up to 6: 2+4=6
    
    Input: [2, 5, 9, 11], target=11
    
    Output: [0, 2]
    
    Explanation: The numbers at index 0 and 2 add up to 11: 2+9=11
    
4. Buatlah sebuah program **ArrayUnique** yang menerima 2 parameter berupa array angka. Output adalah program adalah satu array berupa kumpulan angka di array pertama tetapi tidak memiliki duplikasi di di array kedua.
    
    **Sample Test Case**
    
    input: [1, 2, 3, 4] dan [1, 3, 5, 10, 16]
    
    Output: [2, 4]
    
    input: [3, 8] dan [2, 8]
    
    Output: [3]
    
Jawaban:>
package Tugas;
import java.util.ArrayList;
import java.util.List;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.HashSet;

public class work4 {
    public static int[] arrayUnique(int[] arr1, int[] arr2) {
        // Create a HashSet to store the unique elements of arr2
        Set<Integer> uniqueSet = new HashSet<>();
        for (int num : arr2) {
            uniqueSet.add(num);
        }

        // Create a new ArrayList to store the unique elements of arr1
        List<Integer> uniqueList = new ArrayList<>();
        for (int num : arr1) {
            if (!uniqueSet.contains(num)) {
                uniqueList.add(num);
            }
        }

        // Convert the ArrayList back to an array and return it
        int[] uniqueArr = new int[uniqueList.size()];
        for (int i = 0; i < uniqueList.size(); i++) {
            uniqueArr[i] = uniqueList.get(i);
        }
        return uniqueArr;
    }

    public static void main(String[] args) {
        int[] arr1 = {1, 2, 3, 4};
        int[] arr2 = {1, 3, 5, 10, 16};
        int[] uniqueArr1 = arrayUnique(arr1, arr2);
        System.out.println(Arrays.toString(uniqueArr1));

    }

}


5. Given an array of sorted numbers, remove all duplicates from it. You should not use any extra space; after removing the duplicates in-place return the length of the subarray that has no duplicate in it.
    
    **Sample Test Case**
    
    Input: [2, 3, 3, 3, 6, 9, 9]
    
    Output: 4
    
    Explanation: The first four elements after removing the duplicates will be [2, 3, 6, 9].
    
    Sample Test Case
    
    Input: [2, 2, 2, 11]
    
    Output: 2
Jawaban:>

//Elisandra NPN QE C
package Tugas;
import java.util.Arrays;
public class work5 {
    //menyatakan penghapusan duplikat dari sebuah array
    public static int removeDuplicates(int[] nums) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        //mencari array unique dengan membandingkan j dengan i
        int i = 0;
        for (int j = 1; j < nums.length; j++) {
            if (nums[j] != nums[i]) {
                i++;
                nums[i] = nums[j];
            }
        }
        return i + 1;
    }

    public static void main(String[] args) {
        int[] nums = {2, 3, 3, 3, 6, 9, 9};
        int len = removeDuplicates(nums);
        System.out.println(Arrays.toString(nums));
        System.out.println(len);
    }
}

    
    Explanation: The first two elements after removing the duplicates will be [2, 11].
    
6. [Opsional / Nilai Tambah] Given an array of positive numbers and a positive number ‘k’, find the maximum sum of any contiguous subarray of size ‘k’.
    
    **Sample Test Case**
    
    Input: [2, 1, 5, 1, 3, 2], k=3
    
    Output: 9
    
    Explanation: Subarray with maximum sum is [5, 1, 3].
    
    **Sample Test Case**
    
    Input: [2, 3, 4, 1, 5], k=2
    
    Output: 7
    
    Explanation: Subarray with maximum sum is [3, 4].
    
    2, 1, 5, 1, 3, 2

Jawaban:>
package Tugas;
//Elisandra NPN QE C
public class work6 {
    public static int maxSubArray(int[] nums, int k) {
        int maxSum = 0;
        int currSum = 0;
        for (int i = 0; i < nums.length; i++) {
            currSum += nums[i];
            if (i >= k - 1) {  // mengecek apakah memiliki sub array untuk nilai k
                if (currSum > maxSum) {
                    maxSum = currSum;
                }
                currSum -= nums[i - k + 1];  //menghapus elemen pertama dan digantikan subarray baru
            }
        }
        return maxSum;
    }

    public static void main(String[] args) {
        int[] nums = {2, 1, 5, 1, 3, 2};
        int k = 3;
        int maxSum = maxSubArray(nums, k);
        System.out.println(maxSum);

    }


}
